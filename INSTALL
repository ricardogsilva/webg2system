INSTALLING ON A NEW MACHINE:

You can use the fabfile present in this repository to remotely deploy the
code to a production machine.

- PYTHON THREADING BUG

    - Due to a bug in Python2.7 threading module that was only discovered
      after the release, the code must be manually patched. So, edit the file
      
      /usr/lib/python2.7/threading.py

      and add the following lines right after the def __stop(self) line #607:

      if not hasattr(self, '_Thread__block'):
          return


      for more info check out the original bug report in:
      http://bugs.python.org/issue14308


      After the editing, remove the threading.pyc file (it gets regenerated on first 
      usage).

- Remote installation

1 - set up a local development environment on your machine

	The code is hosted on github: https://github.com/ricardogsilva/webg2system

	1 - Sign up for a github account and ask the webg2system admin to become a 
	    contributor. Also, don't forget to add your SSH keys to your github 
            profile.

	2 - Install and configure the git code versioning software:

		$ sudo apt-get install git
		$ git config --global user.name "your name"
		$ git config --global user.email "your_email_address"

	3 - Clone the webg2system repository

		$ mkdir -p ~/dev
		$ cd ~/dev
		$ git clone https://github.com/ricardogsilva/webg2system.git 

	4 - Install the python-fabric package

		$ sudo apt-get install fabric

2 - start the development django server and edit the host settings,
	adding and activating the desired host machines

	1 - Start the server:

		$ cd ~/dev/webg2system/webg2system
		$ python manage.py runserver

	2 - Adjust the host settings (if needed):

		Using a web browser, navigate to localhost:8000/admin and navigate to the 
		'hosts' section of the systemsettings app. The system will be 
		installed/updated on every host that has an 'active' status and a role
		different from 'archive'.
		You can also turn all the hosts off and turn on only the new one, that
		you wish to install.

2 - run the appropriate fabfile commands in order to install the system
	code in each of the configured hosts.

		$ cd ~/dev/webg2system
		$ fab prepare_deploy
		$ fab deploy

	The "prepare_deploy" command will push your local changes to the remote
	repository.

	The "deploy" command will take care of installing the code on the defined
	hosts. Installation means:

		- installing external dependencies;
		- cloning the remote repository
		-


- Operations database

    The system is configured to use two different databases: 

        - One database for storing the various settings. This is an sqlite 
          database stored in the sqlite.db file.
        
        - Another database for logging the operations. This is also an sqlite
          database, stored in the operations_db.db file. This second database
          is not saved on the repository, it must be created in any new
          machine where the system is to be installed.
    
    Run the following commands:

        cd path_to_working_copy/webg2system
        python manage.py syncdb --database=operations_db

    For more information on using django-south with multiple databases check out:
http://stackoverflow.com/questions/7029228/is-using-multiple-databases-and-south-together-possible

- DJANGO SITE

    - copy the g2system.conf file from the apache directory to 
      /etc/apache2/sites-available and make the necessary adjustments 
      to the paths defined in the file

    - enable the site with 
        
        sudo a2ensiste g2system.conf

    - disable the default website

        sudo a2dissite 000-default

    - reload the webserver. There should be no errors or warnings reported.

        sudo service apache2 reload

    - alter the following configurations in the webg2system/settings.py file:

        STATIC_ROOT = '/home/geo5/webg2system/sitestatic'

    - create a new settings_local.py file by copying the already existent 
      template:

        cp settings_local.py.template settings_local.py

    - change the relevant settings inside the settings_local.py file to 
      reflect the correct paths.

    - run the collectstatic command

        python manage.py collectstatic

    - at this point, the django site should be accessible at (replace 
      geo5.meteo.pt with the actual host name)

        http://geo5.meteo.pt/g2system

- WSGI SETTINGS

    - Edit the g2system.conf file located in /etc/apache2/sites-available
      
      Adjust the WSGIDaemonProcess directive regarding the following:

        - processes: How many simultaneous processes to run in the wsgi 
          daemon mode
        - maximum-requests: How many simultanous requests should be accepted 
          by the server
        - threads: How many threads should be spawned from the allowed 
          processes

    A safe, however not very performant, configuration seems to be:

    - task executioner host for geotiff creation: 
        processes=1 maximum-requests=1 threads=1
    - webserver host: 
        processes=1 threads=1
        

- AUXILIARY WMS

    - copy the map and database files from the archive

        cd webg2system/aux_wms
        scp g2user@192.168.151.29:/media/Data3/geoland2/STATIC_INPUTS/geoland2_aux/geoland2_aux.map .
        scp g2user@192.168.151.29:/media/Data3/geoland2/STATIC_INPUTS/geoland2_aux/geoland2_db.sqlite .

    - make the necessary path adjustments to the geoland2_aux.map file, including:
        - SHAPEPATH
        - wms_onlineresource

    - copy the 'auxiliary' file in webg2system/apache/cgi-bin to 
      /usr/lib/cgi-bin and change the path to the mapfile in order to point 
      to the geoland2_aux.map file

- PERFORMANCE OF THE GEONETWORK DATABASE

    - Check the ammount of RAM memory available on the machine that runs the
      geonetwork database:

        $ free -mt
    
    - Set the kernel's shmmax value to be abou 1/4th of the total RAM 
	  (or more). For example, for a machine with 4GB RAM, setting shmmax
      of 1GB:

        $ sudo sysctl -w kernel.shmmax=1074000000

    - Edit the /etc/postgresql/9.1/main/postgresql.conf file and set:

        max_pred_locks_per_transaction = 200

    - If you need to restart the postgresql database server, be sure to
      rebuild geonetwork's lucene index after that, as the index can become
	  corrupted which will cause new entries to not show. In order to do this,
	  login as the administrator user on the local geonetwork site and select
	  the option to rebuild the lucene index in the administration section.

- PERFORMANCE OF THE GEONETWORK JAVA BACKEND

    - Increase the ammount of memory available to the Java virtual machine. Edit 
      the file:

              $ sudo vim /usr/share/tomcat6/bin/catalina.sh

       and add the following at the top of the file:

              JAVA_OPTS="$JAVA_OPTS -Xms16m -Xmx1024m"
       
       (you may need to tweak these numbers depending on the specs of the 
       machine.)


LOGGING configuration:

- Django
- Geonetwork

	Geonetwork logs go to:

		/var/log/tomcat6/geonetwork.log

	The logging can be configured by editing the file:

		/var/lib/tomcat6/webapps/geonetwork/WEB-INF/log4j.cfg

	Make sure to change the log4j.logger.jeeves setting
	from DEBUG to WARN, in order to produce smaller log files.

- Apache

Apache logs go to 

	/var/log/apache2/error.log

- Tomcat


RESTARTING THE CATALOGUE MACHINE:

1 - reboot the machine:

    $ sudo reboot

2 - change the shmmax kernel variable:

    $ sudo sysctl -w kernel.shmmax=1074000000

3 - start the PostgreSQL database cluster:

    $ sudo service postgresql start

4 - reload the tomcat java server:

    $ sudo service tomcat6 stop && sudo service tomcat6 start

5 - reload the apache web server:

    $ sudo service apache2 reload

6 - rebuild geonetwork's lucene index:

    6.1 - access the geonetwork GUI:

        http://geoland2.meteo.pt/geonetwork

    6.2 - login with administrative privileges

    6.3 - access the 'administration' section

    6.4 - press the 'rebuild Lucene index' button. Wait about 5 minutes.

    6.5 - press the 'optimize Lucene index' button. Wait about 5 minutes.
        

